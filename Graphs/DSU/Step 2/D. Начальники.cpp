#include <bits/stdc++.h>
using namespace std;



// В компании работает n человек, и в настоящий момент никаких связей руководитель-подчиненный нет. Таким образом, каждый сотрудник — начальник. Начальником будем называть такого сотрудника, кто не находится в подчинении кого-либо.

// Необходимо обрабатывать два вида запросов:

//     начальник a становится подчиненным начальника b (и перестает быть начальником),
//     дан сотрудник c, какое количество связей подчинения надо пройти наверх до начальника? 

// Во втором запросе, очевидно, если c — начальник, то ответ 0, иначе некоторая положительная величина — «глубина» сотрудника от начальника.

// Напишите программу, которая обрабатывает запросы.
// Входные данные

// В первой строке записана пара целых чисел n и m (1 ≤ n, m ≤ 3·105) — число сотрудников и число запросов, соответственно. Далее в m строках заданы запросы. Запрос первого вида записывается как «1 a b» (1 ≤ a ≠ b ≤ n), где a и b — начальники. Запрос второго типа записывается в формате «2 c» (1 ≤ c ≤ n).
// Выходные данные

// Выведите по одной строке на каждый запрос второго типа — ответ на этот запрос. Запросы обрабатывайте по порядку.



vector<int> parent;
vector<int> depth;

int updateParent(int x){
    if( x != parent[x] ){
        int tmp = updateParent(parent[x]);
        depth[x] += depth[parent[x]];
        parent[x] = tmp;
    }
    return parent[x];
}

int main() {

    std::ios_base::sync_with_stdio(false);
	std::cin.tie(NULL);

    int n, m;
    cin >> n >> m;

    parent.resize(n);
    depth.resize(n);
    
    for(int i = 0; i < n; ++i){
        parent[i] = i;
        depth[i] = 0;
    }

    for(int i = 0; i < m; ++i){

        string s;
        cin >> s;

        if( s[0] == '1' ){
            int u, v;
            cin >> u >> v;
            --u;
            --v;
            parent[u] = v;
            depth[u] = 1;
        }

        if( s[0] == '2' ){
            int c;
            cin >> c;
            --c;
            int wtf = updateParent(c);
            cout << depth[c] << "\n";
        }

    }


    return 0;
}
